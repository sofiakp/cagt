##########################################################
# CAGT: Cluster AGgregation Tool
# written by Max Libbrecht
# last updated 10/20/10
##########################################################

CAGT is a tool for visualizing and analyzing large set of signal profiles. It was developed to view the histone profile neighborhoods around transcription factors. It uses a clustering algorithm to split the data into similar sets, then uses an assortment of graphical tools to visualize them. 

See PROCEDURE.TXT for a detailed explanation of exactly what CAGT does.  See EXAMPLE.TXT for a detailed of example of how to run CAGT.

Some terminology:
--------------------------------
CAGT uses two basic types of data:  peak data (i.e. transcription factor binding sites) and signal data (i.e. histone mark ChIP-seq fold change signal).  


Instructions for using CAGT:
--------------------------------
0) Install the necessary libraries (see the Libraries section below)

1) Generate a profiles list file according to the format in FILE_FORMATS.txt.  This defines the set of profiles CAGT will run on.

2) Run CAGT from the command line with 
> python cagt.py <output folder> <profiles list file> <options> <mode>

output folder:  CAGT will put all its output in this folder.  You should specify a different output folder for each run of CAGT.  There's no need to create the folder first; CAGT will create it if it doesn't already exist.  

options: Type python cagt.py --help to see the list of all set-able parameters, as well as what each one does. 

mode: CAGT has four modes: "--cluster", "--make-plots" and "--make-html".  You can specify one or many modes; if you specify many modes, they run sequentially. They must be run in the following order: cluster > make-plots > make-html, but you can run one mode, let it finish, then run another mode; all the relevant data is saved after each mode completes.
- In "cluster" mode, CAGT clusters each set of profiles and puts the results in output_folder/clustering_info.pickle.
- In "make-plots" mode, CAGT makes aggregation plots for each peak_tag-signal_tag pair, and puts them in their own folder in output_folder.
- In "make-html" mode, CAGT makes an html view of the plots, and puts a file called "html_view.html" in output_folder (and also produces a number of supporting html pages).  Viewing html_view.html in a browser is an easy way to view the results.

Run $ python cagt.py --help for a help message describing the modes.

3) The results of the run are placed in output_folder. Open html_view.html in a browser for an easy-to-navigate view of the results.


Output:
--------------------------------
The easiest way to interact with CAGT's output is through the html views.  Use a browser to open the html_view_summary file in the output folder.  Note that you can click on any plot to view a list of its members' indices.

The output file structure is as follows:
<output folder>/
	html_view_summary.html  (top-level html view)
	log.txt  (logs generated by CAGT)
	<profile set 1>/
		boxplot_<cluster_type>.png  (plots produced by CAGT)
		html_view_<cluster_type>.html  (lower-level html views)
		members_<cluster_type>.txt  (list of members' indices for each cluster)
		clustering_info.pickle  (used by CAGT)
		done_making_plots.txt  (used by CAGT)
	<profile set 2>/
		...
	...
		


Libraries:
--------------------------------
CAGT requires these libraries:
numpy:
home - http://numpy.scipy.org/
source - http://sourceforge.net/projects/numpy/files/NumPy/1.6.0/numpy-1.6.0.tar.gz/download

scipy: 
home - http://www.scipy.org/
source - http://sourceforge.net/projects/scipy/files/scipy/0.9.0/scipy-0.9.0.tar.gz/download

Pycluster:
home - http://bonsai.hgc.jp/~mdehoon/software/cluster/software.htm
source - http://bonsai.hgc.jp/~mdehoon/software/cluster/Pycluster-1.50.tar.gz

rpy2:
home - http://rpy.sourceforge.net/rpy2.html
source - http://sourceforge.net/projects/rpy/files/rpy2/2.1.x/rpy2-2.1.8.tar.gz/download
using easy_install - type: easy_install rpy2

All of these packages use python's standardized "distutils" install script.  In the source directory, just type:
python setup.py install

If you don't have root access, you can tell distutils to install the module in your home directory instead.  Instead type:
python setup.py install --home=<dir>
You may also have to add <home>/lib/python to your python path.  Type:
export PYTHONPATH="<homedir>:${PYTHONPATH}"

See this link for more info about using distutils without root access:
http://docs.python.org/install/index.html#alternate-installation-the-home-scheme


CAGT data format:
--------------------------------
The profiles files should be named <signal_tag>_around_<peak_tag>.bed3, and they should have the following format:
chr1<tab>start<tab>stop<tab>val1,val2,...,valN

A sample cagt file can be found at:
http://cagt.googlecode.com/files/H3K4me3_around_P300.bed3

