##########################################################
# CAGT: Cluster AGgregation Tool
# written by Max Libbrecht
# last updated 10/20/10
##########################################################

This is a detailed description of exactly what CAGT does in every mode.  For instructions on how to run CAGT, see cagt/README.txt

Below, all parameters are referred to with '<>'s: for example <low_signal_cutoff_quantile>.  All parameters are assigned in parameters.py.  

cluster
-----------------------------------------------
For each peak_tag-signal_tag pair, CAGT does the following:

Low signal assignments:
The goal of this stage is to remove profiles with extremely low signal from the set of profiles to be clustered.  This is done because computing correlation involves dividing by the mean, so profiles with extremely low mean can behave poorly.

CAGT calls profiles low-signal if they have <low_signal_cutoff_quantile>-th quantile less than <low_signal_cutoff_value>.  Low-signal profiles do not participate in any other part of CAGT.

Magnitude group assignments:
The goal of this stage is to break the profiles into groups of similar magnitude.  This is useful for plotting, since it separates variance in magnitude from variance in shape.  

First, CAGT computes the <group_by_quantile>-th quantile of every profile, producing a list of values, with one value for each profile.  Then CAGT computes the <group_quantile_bounds[0]>-th quantile and the <group_quantile_bounds[1]>-th quantile of this list: this provides two values, which represent a robust "range" of the list.  This range is then split into <num_groups> parts, evenly by value.  Each profile is assigned to the group in which its <group_by_quantile>-th quantile falls (the profiles out of the range of <group_quantile_bounds>) are placed into the first and last groups, respectively.

Shape cluster assignments:
First, CAGT uses k-medians clustering with correlation distance metric to cluster the profiles into <cluster_then_merge_num_clusters>.  k-medians is run <npass> times, and the result with the best objective value is used.

Then, CAGT uses nearest-neighbor hierarchical clustering to further cluster the profiles.  The distance metric is the correlation between cluster medians (the cluster medians are recomputed when two clusters are merged).  Hierarchical clustering continues until no two clusters have correlation than <cluster_merge_correlation_cutoff>.  

Then, CAGT does another nearest-neighbor hierarchical clustering step identical to the last step, except this time, it allows clusters to flip orientation when merging.  CAGT records which profiles were flipped in the final clustering.

In the next version, we will add an option to turn flipping off.

correlate
-----------------------------------------------
For each peak_tag-signal_tag-signal_tag triplet, CAGT does the following:

For each cluster1-cluster2 pair (that is, a cluster in one signal tag and a cluster in the other signal tag, all with the same set of peaks), CAGT computes the following statistical test:

Let N be the total number of peaks for this peak_tag.  Let n and m be the size of cluster1 and cluster2 respectively.  Let k be the number of peaks that fall into both cluster1 and cluster2.  The correlation p-value is defined to be the probability that if two clusters of size n and m respectively are chosen randomly without replacement out of N peaks, these clusters share greater than or equal to k peaks.  This is calculated using the hypergeometric test (As defined at http://en.wikipedia.org/wiki/Hypergeometric_test). No multiple-hypothesis correction is done.

The correlate step has a known bug:  The package we used to calculate the hypergeometric p-value apparently has numerical instabilities, so p-values under around 10^-8 are inaccurate, and sometimes even negative.  Importantly, this numerical instability is only a problem at very low p-values: that is, all the p-values reported as low are in fact low, but it's unclear exactly how low (where p-values under around 10^-8 are "low").  In no circumstance does a non-significant p-value get reported as significant.  We're working on fixing this bug.

make-plots
-----------------------------------------------
CAGT produces "boxplots" to visualize the clustering.  In the boxplots, the black line marks the mean, the dark grey area marks the inner 50% quantile, and the light grey area marks the inner 90% quantile.  

CAGT produces boxplots for two kinds of data: signal values and z-score values.  Signal value profiles show the signal as it appears in the data files.  Z-score profiles are generated by subtracting the mean and dividing by the standard deviation.  Notably, replacing a profile with its z-score profile does not change its correlation to other profiles, so z-score profiles would produce the same clustering as signal profiles. 

Signal value boxplots show a vertical dotted line at x=0.  Z-score boxplots show a vertical dotted line at x=0 and a horizontal dotted line at y=0.

CAGT produces the following plots:
All-profiles: A signal value boxplot of all profiles for this peak_tag-signal-tag pair.
Low-signal: A signal value boxplot of all low-signal profiles
High-signal: A signal value boxplot of all high-signal profiles
Shape clusters: Z-score boxplots for each shape cluster (after flipping)
Magnitude groups: Signal value boxplots for all profiles in each magnitude group
Shapes grouped by magnitude: Signal value boxplots for each shape-group pair
Shapes before flipping: Z-score boxplots for each shape cluster, before the flipping step
Oversegmented shapes: Z-score boxplots for all the <cluster_then_merge_num_clusters> clusters returned by k-medians














